name: PHP Security Scan CI/CD

on:
  push:
    branches:
      - main # Dispara o workflow em push para a branch 'main'
  pull_request:
    branches:
      - main # Dispara o workflow para Pull Requests na branch 'main'

jobs:
  security_analysis:
    runs-on: ubuntu-latest # Ambiente de execução no Linux

    steps:
    - name: Checkout code
      uses: actions/checkout@v3 # Pega o seu código

    - name: Set up Python
      uses: actions/setup-python@v4 # Configura o ambiente Python
      with:
        python-version: '3.13' # Certifique-se de que esta é a sua versão exata do Python

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Jinja2 reportlab # Instala as bibliotecas que seu projeto usa

    - name: Get changed PHP files # NOVO PASSO: Identifica os arquivos PHP que mudaram
      id: changed-files # ID para referenciar a saída deste passo
      uses: tj-actions/changed-files@v3 # Action para detectar arquivos modificados
      with:
        files: | # Filtra para buscar apenas arquivos PHP
          **/*.php

    - name: Run PHP Security Analysis on changed files
      # Este passo só executa se houver algum arquivo PHP que foi modificado
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "Iniciando a analise de seguranca PHP nos arquivos modificados..."
        # Pega a lista de todos os arquivos PHP modificados (separados por espaço)
        MODIFIED_PHP_FILES="${{ steps.changed-files.outputs.all_changed_files }}"

        # Verifica se a lista de arquivos nao esta vazia
        if [ -z "$MODIFIED_PHP_FILES" ]; then
          echo "Nenhum arquivo PHP modificado para analisar."
          exit 0 # Sai com sucesso se nao houver arquivos PHP para analisar
        fi

        echo "Arquivos PHP modificados detectados: $MODIFIED_PHP_FILES"
        
        # Chama seu script principal, passando APENAS os arquivos modificados
        # e a flag --no-report (pois os relatórios serão baixados como artefatos)
        python script.py $MODIFIED_PHP_FILES --no-report

        # Captura o status de saída do seu script (0 para sucesso, >0 para erro)
        echo "Script de analise finalizado com o codigo de saida: $?"
        exit $? # Garante que a etapa falhe se o seu script.py falhar

    - name: No PHP files changed or found
      if: steps.changed-files.outputs.any_changed == 'false'
      run: |
        echo "Nenhum arquivo PHP modificado encontrado para analisar. Pulando a analise de seguranca."

    - name: Upload Security Report Artifacts
      # Este passo só é executado se a análise foi bem-sucedida
      if: success()
      uses: actions/upload-artifact@v4 # Versão 4 da action para upload de artefatos
      with:
        name: security-scan-reports
        path: report/ # A pasta onde seus relatórios HTML/PDF são salvos
        # Se nao houver vulnerabilidades e, portanto, nenhum relatorio gerado, o ZIP estara vazio.
        # Ou você pode adicionar uma condição aqui para só subir se a pasta report/ existir e não estiver vazia.