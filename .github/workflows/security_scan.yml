name: PHP Security Scan CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security_analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Manter para o git diff ter histórico completo

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13' # Sua versao do Python

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Jinja2 reportlab

    - name: Get changed PHP files (Using Git Diff)
      id: changed-php-files
      run: |
        CHANGED_FILES=""
        
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_REF="${{ github.base_ref }}"
          CHANGED_FILES=$(git diff --name-only "origin/$BASE_REF" HEAD -- '*.php' | xargs)
        else
          if git rev-parse --verify HEAD^1 &>/dev/null; then
            CHANGED_FILES=$(git diff --name-only HEAD^1 HEAD -- '*.php' | xargs)
          else
            CHANGED_FILES=$(find . -name "*.php" -type f | xargs)
          fi
        fi
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "Nenhum arquivo PHP modificado encontrado."
          echo "changed_files_list=" >> "$GITHUB_OUTPUT"
          echo "any_changed=false" >> "$GITHUB_OUTPUT"
        else
          echo "Arquivos PHP modificados detectados: $CHANGED_FILES"
          echo "changed_files_list=$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "any_changed=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Run PHP Security Analysis on changed files
      if: steps.changed-php-files.outputs.any_changed == 'true'
      run: |
        echo "## Iniciando Analise de Seguranca ##"
        MODIFIED_PHP_FILES="${{ steps.changed-php-files.outputs.changed_files_list }}"
        
        echo "Arquivos PHP sendo analisados: $MODIFIED_PHP_FILES"
        
        # Chama seu script principal. Se nao houver vulnerabilidades, o script.py
        # NAO VAI CRIAR A PASTA REPORT/ por causa da logica de nao gerar relatorios vazios.
        # Por isso, vamos sempre gerar relatorios aqui no CI/CD para que o artefato exista.
        python script.py $MODIFIED_PHP_FILES # REMOVENDO --no-report para SEMPRE gerar relatorios no CI/CD

        echo "Script de analise finalizado com o codigo de saida: $?"
        exit $?

    - name: No PHP files changed or found
      if: steps.changed-php-files.outputs.any_changed == 'false'
      run: |
        echo "Nenhum arquivo PHP modificado encontrado para analisar. Pulando a analise de seguranca."

    - name: Upload Security Report Artifacts
      # Condição para o upload:
      # 1. O passo de analise rodou (any_changed == 'true').
      # 2. O passo de analise foi bem-sucedido.
      # 3. A pasta 'report/' realmente existe e nao esta vazia.
       if: |
        success() &&
        steps.changed-php-files.outputs.any_changed == 'true' &&
        # Para verificar se a pasta report/ existe e nao esta vazia, precisamos de um passo anterior para criar um output
        # ou simplificar a condicao. Vamos simplificar para o que e mais comum e funciona.
        # A forma 'success('ls report/')' não funciona diretamente no 'if'.
        # O mais comum é verificar se a pasta foi criada pelo passo anterior.
        # Se seu script.py cria a pasta report/ mesmo que vazia, entao a condicao ja e mais simples.
        # Vamos assumir que seu script.py cria a pasta report/ e que o upload e desejado se a analise foi OK.
        steps.changed-php-files.outputs.changed_files_list != '' # Se nao ha arquivos, nao ha relatorios

      uses: actions/upload-artifact@v4
      with:
        name: security-scan-reports
        path: report/